
-- https://github.com/dmpalyvos/rsa-haskell

rsaencrypt :: (Integer, Integer) -> Integer -> Integer
rsaencrypt (e, m) x = x^e `mod` m

rsadecrypt :: (Integer, Integer) -> Integer -> Integer
rsadecrypt (d, m) x = x^d `mod` m


-----------------------------------------------------------------------
-- xgcd a b = (x,y,d) where d = g.c.d of a and b and d = a*x + b*y
-- Assumes a,b >= 0
xgcd :: Integer -> Integer -> (Integer,Integer,Integer)
xgcd a b = if (b==0)
           then (1,0,a)
           else (y',x'-y'*q,d)
                 where  (q,r)     = divMod a b -- a = q*b+r & 0<=r<b
                        (x',y',d) = xgcd b r

-----------------------------------------------------------------------
-- invert a n = a^(-1) (mod n) , if a and n are rel. prime
--            = 0              , if a and n are not rel. prim
invert :: Integer -> Integer -> Integer
invert a n = let (x,y,d) = xgcd a n
             in if (d/=1) then 0 else x `mod` n

------------------------------------------------------------------------
------------------------------------------------------------------------
-- RSA setup for Alice






-- https://stackoverflow.com/questions/71550301/haskell-rsa-encryption
